# ===============================================================================
# PLATFORM SERVICE CI/CD - FULL DJANGO WITH DATABASE üè¢
# ===============================================================================

name: Platform Service CI/CD

on:
  push:
    branches: [ master, develop, 'feat/*', 'fix/*' ]
    paths:
      - 'services/platform/**'
      - '.github/workflows/platform.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'services/platform/**'
      - '.github/workflows/platform.yml'

jobs:
  platform-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: platform-${{ runner.os }}-pip-${{ hashFiles('services/platform/requirements/*.txt') }}
        restore-keys: |
          platform-${{ runner.os }}-pip-
    
    - name: Install platform dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/platform/requirements/dev.txt
    
    - name: Set up platform environment
      run: |
        export DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db
        export DJANGO_SETTINGS_MODULE=config.settings.test
        export SECRET_KEY=test-secret-key-for-ci
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "DJANGO_SETTINGS_MODULE=config.settings.test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
    
    - name: Create database cache table
      run: |
        cd services/platform
        PYTHONPATH=$(pwd) python manage.py createcachetable django_cache_table || echo "‚úÖ Cache table already exists"
    
    - name: Run platform migrations
      run: |
        cd services/platform
        PYTHONPATH=$(pwd) python manage.py migrate --no-input
    
    - name: Run platform type checking
      run: |
        cd services/platform
        echo "üè∑Ô∏è Running mypy type checking for platform..."
        PYTHONPATH=$(pwd) python -m mypy apps/ --config-file ../../pyproject.toml --no-error-summary || echo "‚ö†Ô∏è Type checking completed with issues"
    
    - name: Run platform unit tests
      run: |
        cd services/platform
        echo "üß™ Running platform unit tests..."
        PYTHONPATH=$(pwd) python -m pytest apps/ -v --tb=short --maxfail=10
    
    - name: Run platform database cache tests
      run: |
        cd services/platform
        echo "üóÑÔ∏è Testing database cache functionality..."
        PYTHONPATH=$(pwd) python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.test')
        import django
        django.setup()
        from django.core.cache import cache
        
        # Test cache operations
        cache.set('test_key', 'test_value', 300)
        result = cache.get('test_key')
        assert result == 'test_value', f'Expected test_value, got {result}'
        print('‚úÖ Database cache working correctly')
        
        # Test cache deletion
        cache.delete('test_key')
        result = cache.get('test_key')
        assert result is None, f'Expected None after deletion, got {result}'
        print('‚úÖ Database cache deletion working correctly')
        "
    
    - name: Lint platform code
      run: |
        cd services/platform
        echo "üßπ Running linting for platform service..."
        PYTHONPATH=$(pwd) ruff check apps/ || echo "‚ö†Ô∏è Linting completed with issues"
        PYTHONPATH=$(pwd) black --check apps/ || echo "‚ö†Ô∏è Code formatting check completed with issues"
    
    - name: Check for hardcoded credentials
      run: |
        echo "üîê Checking for hardcoded credentials in platform..."
        grep -r -i "password.*=" services/platform/ && echo "üî• Found hardcoded credentials!" && exit 1 || echo "‚úÖ No hardcoded credentials found"
        grep -r -i "secret.*=" services/platform/ --exclude="*.md" && echo "üî• Found hardcoded secrets!" && exit 1 || echo "‚úÖ No hardcoded secrets found"
    
    - name: Upload platform artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: platform-reports
        path: |
          services/platform/htmlcov/
          services/platform/pytest_report.html
        if-no-files-found: warn

  platform-security:
    runs-on: ubuntu-latest
    needs: platform-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/platform/requirements/dev.txt
    
    - name: Run security checks
      run: |
        echo "üõ°Ô∏è Running platform security validation..."
        cd services/platform
        
        # Verify platform can import its own models
        PYTHONPATH=$(pwd) python -c "
        try:
            from apps.billing.models import Invoice
            print('‚úÖ Platform can access billing models')
        except ImportError as e:
            print(f'üî• Platform cannot access billing models: {e}')
            exit(1)
        " || exit 1
        
        # Verify platform has database access  
        PYTHONPATH=$(pwd) python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.test')
        import django
        django.setup()
        from django.db import connection
        
        try:
            with connection.cursor() as cursor:
                cursor.execute('SELECT 1')
                print('‚úÖ Platform has database access')
        except Exception as e:
            print(f'üî• Platform database access failed: {e}')
            exit(1)
        " || exit 1
