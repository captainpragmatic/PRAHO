# ===============================================================================
# PRAHO PLATFORM - PYTHON PROJECT CONFIGURATION
# ===============================================================================

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "praho-platform"
version = "0.3.0"
description = "PRAHO Platform - PRAHO Really Automates Hosting Operations"
authors = [
    {name = "PragmaticHost Development Team", email = "dev@pragmatichost.com"}
]
license = {text = "AGPL-3.0-or-later"}
requires-python = ">=3.11"
keywords = ["hosting", "praho platform", "billing", "web hosting", "django", "htmx", "tailwindcss", "platform"]
classifiers = [
    # Development Phase
    "Development Status :: 3 - Alpha",
    
    # Target Audience
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "Intended Audience :: Information Technology",
    "Intended Audience :: End Users/Desktop",
    
    # Framework & Environment
    "Framework :: Django :: 5.2",
    "Environment :: Web Environment",
    "Environment :: Console",
    
    # License
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    
    # Operating System
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    
    # Programming Language
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: JavaScript",
    
    # Topic Categories
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Networking",
    "Topic :: System :: Monitoring",
    "Topic :: Communications :: Email",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    
    # Natural Language
    "Natural Language :: English",
    "Natural Language :: Romanian",
]

# ===============================================================================
# CODE QUALITY CONFIGURATION
# ===============================================================================

[tool.ruff]
# ===============================================================================
# PRAHO PLATFORM - STRATEGIC LINTING CONFIGURATION üéØ
# ===============================================================================
# Focus: Performance, Security, AI/LLM Readability, Business Impact
# Philosophy: Enforce what matters, ignore cosmetic preferences

line-length = 120  # Modern screens, but not strictly enforced
target-version = "py311"
exclude = [
    ".venv",
    "migrations",
    "__pycache__",
    ".git",
    "static",
    "htmlcov",
    "node_modules",
    "media",
]

[tool.ruff.lint]
# ===============================================================================
# STRATEGIC RULE SELECTION - Business Impact Focus üöÄ
# ===============================================================================

select = [
    # ‚úÖ CRITICAL - Runtime Errors (ALWAYS ENFORCE)
    "E",      # pycodestyle errors (syntax, indentation)
    "F",      # Pyflakes (undefined names, unused imports) 
    "W",      # pycodestyle warnings
    
    # ‚ö° PERFORMANCE - O(N¬≤) Detection & Optimization  
    "PERF",   # Performance anti-patterns (NEW!)
    "C90",    # McCabe complexity (prevent spaghetti code)
    "PIE",    # flake8-pie (performance improvements)
    "SIM",    # flake8-simplify (simpler = faster + fewer bugs)
    
    # üîí SECURITY - WARNING ONLY (Manual Review Required)
    "S",      # bandit security issues (WARN, don't ignore)
    "B",      # flake8-bugbear (likely bugs)
    
    # üêç DJANGO EXCELLENCE
    "DJ",     # flake8-django (Django best practices) 
    "A",      # flake8-builtins (prevent shadowing)
    
    # ü§ñ AI/LLM READABILITY - Help Claude/Copilot
    "I",      # isort (organized imports)
    "N",      # pep8-naming (consistent naming)
    "UP",     # pyupgrade (modern Python syntax)
    "ANN",    # flake8-annotations (type hints for AI)
    
    # üì¶ CODE QUALITY
    "C4",     # flake8-comprehensions
    "TID",    # flake8-tidy-imports
    "RUF",    # Ruff-specific rules
    "ERA",    # eradicate (remove commented code)
    
    # üßπ MAINTENANCE 
    "PL",     # Pylint subset (errors/warnings only)
]

# ===============================================================================
# STRATEGIC IGNORES - Focus on What Matters üé®
# ===============================================================================

ignore = [
    # ‚ùå COSMETIC RULES (Don't Block Development)
    "E501",   # Line too long (modern screens handle 120+)
    "W291",   # Trailing whitespace (auto-fixable)
    "W293",   # Blank line with whitespace (cosmetic)
    
    # ‚ùå DEVELOPMENT HELPERS (Useful in Debug)
    "T201",   # print statements (useful for debugging)
    "T203",   # pprint statements
    
    # ‚ùå TEST-SPECIFIC ALLOWANCES
    "S101",   # Use of assert (standard in tests)
    # "S105", # Hardcoded password string - WARN EVERYWHERE
    # "S106", # Hardcoded password funcarg - WARN EVERYWHERE
    
    # ‚ùå DJANGO PATTERNS (Framework Conventions)
    "DTZ005", # timezone-naive datetime (Django handles this)
    "S104",   # Hardcoded bind all interfaces (dev server)
    "DJ008",  # Model meta ordering (style preference)
    
    # ‚ùå TYPE HINT EDGE CASES
    # "ANN101", # Missing type annotation for self (REMOVED IN NEWER RUFF)
    # "ANN102", # Missing type annotation for cls (REMOVED IN NEWER RUFF)
    "ANN401", # Dynamically typed expressions (Django magic)
    
    # ‚ùå TODO/FIXME COMMENTS (Development Process)
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link in TODO
    "FIX002", # Line contains TODO
    
    # ‚ùå QUOTE STYLE (Preference, Not Functional)
    "Q000",   # Single vs double quotes
    "COM812", # Trailing comma in Python 3.6+
    
    # ‚ùå DOCSTRING REQUIREMENTS (Important but not blocking)
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
]

[tool.ruff.lint.per-file-ignores]
# ===============================================================================
# FILE-SPECIFIC RULE RELAXATION üìÅ
# ===============================================================================

# Test files - Focus on functionality over style (SECURITY WARNINGS ENABLED)
"test_*.py" = [
    "S101",     # Allow assert statements  
    # "S105", "S106", # REMOVED - Show hardcoded password warnings
    "ANN",      # Skip type hints in tests
    "D",        # Skip docstrings in tests
    "PLR2004",  # Allow magic numbers in tests
    "B017",     # Allow pytest.raises() patterns
]
"tests/**/*.py" = [
    "S101", "ANN", "D", "PLR2004", "B017"
    # "S105", "S106" - REMOVED - Show hardcoded password warnings
]

# Django management commands - Allow print statements and dev utilities
"manage.py" = ["T201", "T203"]
"**/management/commands/*.py" = ["T201", "T203", "S602", "S603"]

# Development data generation - Allow patterns but WARN on hardcoded secrets
"**/management/commands/generate_sample_data.py" = [
    "T201", "T203",     # Print statements for progress
    # "S105", "S106",   # REMOVED - Show hardcoded password warnings
    "S311",             # Pseudo-random generators (sample data generation)
    "S602", "S603",     # Subprocess calls (dev utility)
    "PLR2004",          # Magic numbers (sample data)
    "ANN",              # Type hints (utility script)
    "F841"              # Unused variables (sample data creation)
]

# Migration files - Generated code, minimal linting
"**/migrations/*.py" = [
    "E501",     # Long lines acceptable
    "N806",     # Variable naming (Django generates these)
    "D",        # No docstrings needed
    "ANN",      # No type hints needed
]

# Configuration files - Allow longer lines and flexible naming
"config/**/*.py" = ["E501", "N802", "N803"]
"**/settings/*.py" = ["E501", "N802"]
# REMOVED S105, S106 - Show hardcoded password warnings in settings

# Test settings - Allow fake credentials but WARN about hardcoded secrets
"**/settings/test.py" = [
    "E501",             # Long lines acceptable
    # "S105", "S106",   # REMOVED - Show hardcoded password warnings even in test settings
    "N802", "N803",     # Variable naming (settings pattern)
    "F403", "F405",     # Star imports (settings inheritance)
    "ANN",              # Type hints (configuration file)
    "ERA001"            # Commented code (configuration notes)
]

# Development scripts - Allow print statements and exception handling
"scripts/*.py" = [
    "T201", "T203",     # Print statements (progress reporting)
    "S602", "S603", "S607",  # Subprocess calls (utility scripts)
    "S110",             # Try-except-pass (resilient scripts)
    "E722",             # Bare except (error handling)
    "E402",             # Module import not at top (Django setup)
    "ANN",              # Type hints (utility scripts)
    "PLR0912", "PLR0915", "PLR2004",  # Complexity (utility scripts)
    "C901",             # Complex functions (setup logic)
    "PLC0415",          # Import placement (conditional imports)
    "RUF001",           # Ambiguous unicode (info symbols)
    "ERA001",           # Commented code (development notes)
    "F403", "F405"      # Star imports (settings pattern)
]

# E2E test utilities - Allow test patterns but WARN on hardcoded secrets
"tests/e2e/**/*.py" = ["ANN", "D"]
# REMOVED S105, S106 - Show hardcoded password warnings even in E2E tests

[tool.ruff.lint.isort]
# ===============================================================================
# IMPORT ORGANIZATION - AI/LLM Friendly ü§ñ
# ===============================================================================
# Organized imports help both humans and AI understand code structure

known-first-party = ["apps", "config", "ui"]
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.mccabe]
# ===============================================================================
# COMPLEXITY CONTROL üß†
# ===============================================================================
# Functions above this threshold need refactoring (O(N¬≤) prevention)
max-complexity = 12  # Balanced: allows reasonable business logic

[tool.ruff.lint.flake8-bugbear]
# ===============================================================================
# BUG PREVENTION üêõ
# ===============================================================================
# Prevent common Python gotchas that cause production issues
extend-immutable-calls = [
    "django.utils.timezone.now",
    "django.conf.settings",
    "uuid.uuid4",
]

[tool.ruff.lint.flake8-annotations]
# ===============================================================================
# TYPE HINT STRATEGY üè∑Ô∏è
# ===============================================================================
# Help AI/LLMs understand code intent through typing
mypy-init-return = true
suppress-dummy-args = true

# ===============================================================================
# TYPE CHECKING CONFIGURATION
# ===============================================================================

[tool.mypy]
# Gradual typing strategy - Phase 2 implementation üéØ
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Django-specific configuration
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "apps.*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "config.settings.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
# Phase 2: Gradual typing - High-impact modules first
module = [
    "apps.common.types",
    "apps.common.validators",
    "apps.users.services",
    "apps.audit.services",
]
disallow_untyped_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
# Phase 3: Progressive strict mode - Core apps (audit, billing, users)
module = [
    "apps.audit.*",
    "apps.billing.*",
    "apps.users.*",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_return_any = true

[[tool.mypy.overrides]]
# Phase 3: Business logic apps (customers, tickets, orders)
module = [
    "apps.customers.*",
    "apps.tickets.*",
    "apps.orders.*",
]
disallow_untyped_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
# Phase 3: Infrastructure apps (provisioning, domains, integrations)
module = [
    "apps.provisioning.*",
    "apps.domains.*",
    "apps.integrations.*",
]
disallow_untyped_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
# Phase 2: Service layer modules - strict typing
module = [
    "apps.*.services",
    "apps.*.repos",
    "apps.*.gateways",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true

[tool.django-stubs]
django_settings_module = "config.settings.dev"

# ===============================================================================
# TEST CONFIGURATION
# ===============================================================================

[tool.pytest.ini_options]
# Romanian business compliance testing
DJANGO_SETTINGS_MODULE = "config.settings.test"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--reuse-db",
]
testpaths = [
    "tests/users",
    "tests/billing", 
    "tests/customers",
    "tests/audit",
    "tests/common",
    "tests/domains",
    "tests/notifications", 
    "tests/orders",
    "tests/products",
    "tests/provisioning",
    "tests/tickets",
    "tests/ui",
    "tests/integration-tests"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (cross-app functionality)",
    "e2e: marks tests as end-to-end tests",
    "romanian_compliance: marks tests for Romanian regulations",
    "security: marks security-related tests",
    "unit: marks tests as unit tests (single app/component)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ===============================================================================
# COVERAGE CONFIGURATION  
# ===============================================================================

[tool.coverage.run]
# compliance requires high test coverage
source = ["apps", "config", "ui"]
omit = [
    "*/migrations/*",
    "*/tests/*", 
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
]
branch = true

[tool.coverage.report]
# Enforce 90% diff coverage for business compliance
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ===============================================================================
# DEVELOPMENT TOOLS
# ===============================================================================

[tool.djlint]
# Template linting for HTMX + Tailwind templates
profile = "django"
extension = "html"
indent = 2
max_line_length = 100
format_attribute_template_tags = true

[tool.djlint.rules]
# template standards
ignore = "H006,H030,H031"  # Allow img without alt, allow raw text, allow Meta tag

# ===============================================================================
# DEPLOYMENT CONFIGURATION
# ===============================================================================

[tool.setuptools.packages.find]
where = ["."]
include = ["apps*", "config*", "ui*"]
exclude = ["tests*", "*.tests*"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.css", "*.js", "*.json", "*.txt", "*.md"]
