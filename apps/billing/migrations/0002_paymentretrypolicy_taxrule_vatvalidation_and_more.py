# Generated by Django 5.0.14 on 2025-08-19 17:42

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("billing", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PaymentRetryPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable policy name (e.g., 'Standard Hosting', 'VIP Customer')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of when this policy applies"
                    ),
                ),
                (
                    "retry_intervals_days",
                    models.JSONField(
                        default=list,
                        help_text="Days after failure to retry (e.g., [1, 3, 7, 14, 30])",
                    ),
                ),
                (
                    "max_attempts",
                    models.IntegerField(
                        default=4,
                        help_text="Maximum number of retry attempts",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "suspend_service_after_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Days after final failure to suspend service (null = never)",
                        null=True,
                    ),
                ),
                (
                    "terminate_service_after_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Days after final failure to terminate service (null = never)",
                        null=True,
                    ),
                ),
                (
                    "send_dunning_emails",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to send email notifications during dunning",
                    ),
                ),
                (
                    "email_template_prefix",
                    models.CharField(
                        default="dunning",
                        help_text="Template prefix for dunning emails (e.g., 'dunning_vip')",
                        max_length=50,
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the default policy for new customers",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this policy is currently active",
                    ),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional policy configuration",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Payment Retry Policy",
                "verbose_name_plural": "Payment Retry Policies",
                "db_table": "payment_retry_policies",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TaxRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="ISO 3166-1 alpha-2 country code (e.g., 'RO', 'DE')",
                        max_length=2,
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        help_text="State/province for countries with regional tax rates",
                        max_length=50,
                    ),
                ),
                (
                    "tax_type",
                    models.CharField(
                        choices=[
                            ("vat", "VAT"),
                            ("gst", "GST"),
                            ("sales_tax", "Sales Tax"),
                            ("withholding", "Withholding Tax"),
                        ],
                        default="vat",
                        max_length=20,
                    ),
                ),
                (
                    "rate",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Tax rate as decimal (e.g., 0.19 for 19%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "reduced_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Reduced rate for specific product categories",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "valid_from",
                    models.DateField(help_text="When this tax rate becomes effective"),
                ),
                (
                    "valid_to",
                    models.DateField(
                        blank=True,
                        help_text="When this tax rate expires (null = indefinite)",
                        null=True,
                    ),
                ),
                (
                    "applies_to_b2b",
                    models.BooleanField(
                        default=True,
                        help_text="Whether tax applies to business-to-business transactions",
                    ),
                ),
                (
                    "applies_to_b2c",
                    models.BooleanField(
                        default=True,
                        help_text="Whether tax applies to business-to-consumer transactions",
                    ),
                ),
                (
                    "reverse_charge_eligible",
                    models.BooleanField(
                        default=False,
                        help_text="Whether reverse charge mechanism applies (EU B2B)",
                    ),
                ),
                (
                    "is_eu_member",
                    models.BooleanField(
                        default=False,
                        help_text="Whether country is EU member for VAT purposes",
                    ),
                ),
                (
                    "vies_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether VIES VAT number validation is required",
                    ),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional tax configuration and rules",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Tax Rule",
                "verbose_name_plural": "Tax Rules",
                "db_table": "tax_rules",
                "ordering": ["country_code", "tax_type", "-valid_from"],
                "indexes": [
                    models.Index(
                        fields=["country_code", "tax_type"],
                        name="tax_rules_country_eef407_idx",
                    ),
                    models.Index(
                        fields=["valid_from", "valid_to"],
                        name="tax_rules_valid_f_628e80_idx",
                    ),
                    models.Index(
                        fields=["is_eu_member"], name="tax_rules_is_eu_m_7692a7_idx"
                    ),
                ],
                "unique_together": {
                    ("country_code", "region", "tax_type", "valid_from")
                },
            },
        ),
        migrations.CreateModel(
            name="VATValidation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="Country code (e.g., 'RO')", max_length=2
                    ),
                ),
                (
                    "vat_number",
                    models.CharField(
                        help_text="VAT number without country prefix", max_length=20
                    ),
                ),
                (
                    "full_vat_number",
                    models.CharField(
                        help_text="Complete VAT number (e.g., 'RO12345678')",
                        max_length=25,
                    ),
                ),
                (
                    "is_valid",
                    models.BooleanField(help_text="Whether VAT number is valid"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Whether company is active for VAT purposes",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        help_text="Company name from VIES (if available)",
                        max_length=255,
                    ),
                ),
                (
                    "company_address",
                    models.TextField(
                        blank=True, help_text="Company address from VIES (if available)"
                    ),
                ),
                ("validation_date", models.DateTimeField(auto_now_add=True)),
                (
                    "validation_source",
                    models.CharField(
                        choices=[
                            ("vies", "VIES API"),
                            ("manual", "Manual Override"),
                            ("cached", "Previous Validation"),
                        ],
                        default="vies",
                        max_length=20,
                    ),
                ),
                (
                    "response_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Raw API response for audit purposes",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When validation result expires",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "VAT Validation",
                "verbose_name_plural": "VAT Validations",
                "db_table": "vat_validations",
                "ordering": ["-validation_date"],
                "indexes": [
                    models.Index(
                        fields=["full_vat_number"],
                        name="vat_validat_full_va_de39fa_idx",
                    ),
                    models.Index(
                        fields=["validation_date"],
                        name="vat_validat_validat_71fc91_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="vat_validat_expires_e138e8_idx"
                    ),
                ],
                "unique_together": {("country_code", "vat_number")},
            },
        ),
        migrations.CreateModel(
            name="PaymentCollectionRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "run_type",
                    models.CharField(
                        choices=[
                            ("automatic", "Automatic Scheduled"),
                            ("manual", "Manual Trigger"),
                            ("test", "Test Run"),
                        ],
                        default="automatic",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When collection run completed", null=True
                    ),
                ),
                (
                    "total_scheduled",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total retry attempts scheduled in this run",
                    ),
                ),
                (
                    "total_processed",
                    models.PositiveIntegerField(
                        default=0, help_text="Total retry attempts processed"
                    ),
                ),
                (
                    "total_successful",
                    models.PositiveIntegerField(
                        default=0, help_text="Total successful payment recoveries"
                    ),
                ),
                (
                    "total_failed",
                    models.PositiveIntegerField(
                        default=0, help_text="Total failed retry attempts"
                    ),
                ),
                (
                    "amount_recovered_cents",
                    models.BigIntegerField(
                        default=0, help_text="Total amount recovered in cents"
                    ),
                ),
                (
                    "fees_charged_cents",
                    models.BigIntegerField(
                        default=0, help_text="Total fees charged by payment processor"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="running",
                        max_length=20,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if run failed"
                    ),
                ),
                (
                    "config_snapshot",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuration used for this run",
                    ),
                ),
                (
                    "triggered_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who triggered manual run",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Collection Run",
                "verbose_name_plural": "Payment Collection Runs",
                "db_table": "payment_collection_runs",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["-started_at"], name="payment_col_started_003cea_idx"
                    ),
                    models.Index(
                        fields=["status"], name="payment_col_status_84a646_idx"
                    ),
                    models.Index(
                        fields=["run_type", "-started_at"],
                        name="payment_col_run_typ_c01d86_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PaymentRetryAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "attempt_number",
                    models.PositiveIntegerField(
                        help_text="Sequence number of this retry attempt (1, 2, 3...)"
                    ),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(
                        help_text="When this retry was scheduled to run"
                    ),
                ),
                (
                    "executed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this retry was actually executed",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "gateway_response",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Payment gateway response for audit",
                    ),
                ),
                (
                    "failure_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for failure if retry was unsuccessful",
                    ),
                ),
                (
                    "dunning_email_sent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether dunning email was sent for this attempt",
                    ),
                ),
                (
                    "dunning_email_sent_at",
                    models.DateTimeField(
                        blank=True, help_text="When dunning email was sent", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "payment",
                    models.ForeignKey(
                        help_text="Original failed payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="retry_attempts",
                        to="billing.payment",
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        help_text="Retry policy used for this attempt",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="billing.paymentretrypolicy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Retry Attempt",
                "verbose_name_plural": "Payment Retry Attempts",
                "db_table": "payment_retry_attempts",
                "ordering": ["payment", "attempt_number"],
                "indexes": [
                    models.Index(
                        fields=["scheduled_at", "status"],
                        name="payment_ret_schedul_f238b6_idx",
                    ),
                    models.Index(
                        fields=["payment", "-attempt_number"],
                        name="payment_ret_payment_2c2e2e_idx",
                    ),
                    models.Index(
                        fields=["status", "executed_at"],
                        name="payment_ret_status_6a0dcc_idx",
                    ),
                ],
                "unique_together": {("payment", "attempt_number")},
            },
        ),
    ]
