# Generated by Django 5.0.14 on 2025-08-19 13:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("customers", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(\\+40|0)[0-9]{9,10}$",
                                "Invalid Romanian phone number",
                            )
                        ],
                    ),
                ),
                (
                    "staff_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("admin", "System Administrator"),
                            ("support", "Support Agent"),
                            ("billing", "Billing Staff"),
                            ("manager", "Manager"),
                        ],
                        help_text="Staff role for internal staff. Leave empty for customer users.",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("two_factor_secret", models.CharField(blank=True, max_length=32)),
                ("backup_tokens", models.JSONField(blank=True, default=list)),
                ("accepts_marketing", models.BooleanField(default=False)),
                ("gdpr_consent_date", models.DateTimeField(blank=True, null=True)),
                (
                    "last_privacy_policy_accepted",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("failed_login_attempts", models.PositiveIntegerField(default=0)),
                ("account_locked_until", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_users",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CustomerMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("billing", "Billing"),
                            ("tech", "Technical"),
                            ("viewer", "Viewer"),
                        ],
                        help_text="User role within this customer organization",
                        max_length=20,
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Primary customer for this user (used for default context)",
                    ),
                ),
                (
                    "email_billing",
                    models.BooleanField(
                        default=True, verbose_name="Email billing notifications"
                    ),
                ),
                (
                    "email_technical",
                    models.BooleanField(
                        default=True, verbose_name="Email technical notifications"
                    ),
                ),
                (
                    "email_marketing",
                    models.BooleanField(
                        default=False, verbose_name="Email marketing notifications"
                    ),
                ),
                (
                    "notification_language",
                    models.CharField(
                        choices=[("ro", "Română"), ("en", "English")],
                        default="ro",
                        max_length=5,
                        verbose_name="Notification language",
                    ),
                ),
                (
                    "preferred_contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("both", "Email and phone"),
                        ],
                        default="email",
                        max_length=20,
                        verbose_name="Preferred contact method",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="customers.customer",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Membership",
                "verbose_name_plural": "Customer Memberships",
                "db_table": "customer_membership",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="customers",
            field=models.ManyToManyField(
                blank=True,
                related_name="members",
                through="users.CustomerMembership",
                to="customers.customer",
            ),
        ),
        migrations.CreateModel(
            name="UserLoginLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "Success"),
                            ("failed_password", "Failed Password"),
                            ("failed_2fa", "Failed 2FA"),
                            ("account_locked", "Account Locked"),
                            ("account_disabled", "Account Disabled"),
                        ],
                        max_length=20,
                    ),
                ),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Login Log",
                "verbose_name_plural": "User Login Logs",
                "db_table": "user_login_logs",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_language",
                    models.CharField(
                        choices=[("en", "English"), ("ro", "Romanian")],
                        default="en",
                        max_length=5,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(default="Europe/Bucharest", max_length=50),
                ),
                (
                    "date_format",
                    models.CharField(
                        choices=[
                            ("%d.%m.%Y", "DD.MM.YYYY"),
                            ("%Y-%m-%d", "YYYY-MM-DD"),
                        ],
                        default="%d.%m.%Y",
                        max_length=20,
                    ),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                ("marketing_emails", models.BooleanField(default=False)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "db_table": "user_profiles",
            },
        ),
        migrations.AddIndex(
            model_name="customermembership",
            index=models.Index(
                fields=["user", "is_primary"], name="customer_me_user_id_e876df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customermembership",
            index=models.Index(
                fields=["customer", "role"], name="customer_me_custome_af54c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customermembership",
            index=models.Index(
                fields=["user", "created_at"], name="customer_me_user_id_b51342_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="customermembership",
            unique_together={("customer", "user")},
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["staff_role"], name="users_staff_r_2e7ca1_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_staff"], name="users_is_staf_9ea57e_idx"),
        ),
        migrations.AddIndex(
            model_name="userloginlog",
            index=models.Index(
                fields=["user", "timestamp"], name="user_login__user_id_46815a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userloginlog",
            index=models.Index(
                fields=["ip_address", "timestamp"],
                name="user_login__ip_addr_1b2691_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userloginlog",
            index=models.Index(
                fields=["status", "timestamp"], name="user_login__status_d33b7d_idx"
            ),
        ),
    ]
