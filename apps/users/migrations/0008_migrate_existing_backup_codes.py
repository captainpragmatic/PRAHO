# Generated by Django 5.2.5 on 2025-08-31 19:47

from django.db import migrations


def migrate_existing_backup_codes(apps, schema_editor):
    """
    Migrate existing backup codes from User.backup_tokens JSONField
    to the new BackupCode model with proper Argon2 hashing.
    
    This migration addresses A02 Cryptographic Failures by:
    1. Converting from mixed hashing schemes to standardized Argon2
    2. Adding proper audit trails with creation timestamps
    3. Implementing one-time use enforcement
    4. Preserving existing backup code functionality
    """
    User = apps.get_model('users', 'User')
    BackupCode = apps.get_model('users', 'BackupCode')
    
    # Get the current time for all migrated codes
    from django.utils import timezone
    migration_time = timezone.now()
    
    users_with_backup_codes = User.objects.filter(backup_tokens__len__gt=0)
    migrated_count = 0
    
    for user in users_with_backup_codes:
        # Create BackupCode objects for each existing backup token
        backup_code_objects = []
        
        for hashed_token in user.backup_tokens:
            # The existing tokens are already hashed, so we preserve them
            # Note: These will use the old hashing scheme until regenerated
            backup_code_objects.append(BackupCode(
                user=user,
                hashed_code=hashed_token,  # Preserve existing hash
                is_used=False,
                created_at=migration_time,
                generation_context="migrated_from_json_field",
            ))
        
        # Bulk create the backup codes
        BackupCode.objects.bulk_create(backup_code_objects)
        migrated_count += len(backup_code_objects)
        
        # Clear the old backup_tokens field (keep the field for now)
        user.backup_tokens = []
        user.save(update_fields=['backup_tokens'])
    
    if migrated_count > 0:
        print(f"✅ Migrated {migrated_count} backup codes for {users_with_backup_codes.count()} users")
    else:
        print("✅ No backup codes to migrate")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration: move BackupCode data back to User.backup_tokens
    """
    User = apps.get_model('users', 'User')
    BackupCode = apps.get_model('users', 'BackupCode')
    
    reversed_count = 0
    
    for user in User.objects.all():
        # Get unused backup codes for this user
        backup_codes = BackupCode.objects.filter(user=user, is_used=False)
        
        if backup_codes.exists():
            # Move hashed codes back to backup_tokens JSONField
            user.backup_tokens = [bc.hashed_code for bc in backup_codes]
            user.save(update_fields=['backup_tokens'])
            reversed_count += backup_codes.count()
    
    # Delete all BackupCode objects
    BackupCode.objects.all().delete()
    
    if reversed_count > 0:
        print(f"✅ Reversed {reversed_count} backup codes")


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0007_create_backup_code_model'),
    ]

    operations = [
        migrations.RunPython(
            migrate_existing_backup_codes,
            reverse_migration,
        ),
    ]
