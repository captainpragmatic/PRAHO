# Generated by Django 5.0.14 on 2025-08-19 17:22

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("billing", "0001_initial"),
        ("customers", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="OrderStatusHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "old_status",
                    models.CharField(
                        blank=True, help_text="Previous status", max_length=20
                    ),
                ),
                ("new_status", models.CharField(help_text="New status", max_length=20)),
                (
                    "reason",
                    models.CharField(
                        blank=True, help_text="Reason for status change", max_length=255
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the change"
                    ),
                ),
                (
                    "is_automatic",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this was an automatic system change",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Order Status History",
                "verbose_name_plural": "Order Status Histories",
                "db_table": "order_status_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "order_number",
                    models.CharField(
                        help_text="Human-readable order number",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                        ],
                        default="draft",
                        help_text="Current order status",
                        max_length=20,
                    ),
                ),
                (
                    "exchange_to_ron",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Exchange rate to RON at time of order",
                        max_digits=18,
                        null=True,
                    ),
                ),
                (
                    "subtotal_cents",
                    models.BigIntegerField(
                        default=0, help_text="Subtotal before tax in cents"
                    ),
                ),
                (
                    "tax_cents",
                    models.BigIntegerField(
                        default=0, help_text="Total tax amount in cents"
                    ),
                ),
                (
                    "discount_cents",
                    models.BigIntegerField(
                        default=0, help_text="Total discount amount in cents"
                    ),
                ),
                (
                    "total_cents",
                    models.BigIntegerField(
                        default=0, help_text="Final total amount in cents"
                    ),
                ),
                (
                    "customer_email",
                    models.EmailField(
                        help_text="Customer email at time of order", max_length=254
                    ),
                ),
                (
                    "customer_name",
                    models.CharField(
                        help_text="Customer name at time of order", max_length=255
                    ),
                ),
                (
                    "customer_company",
                    models.CharField(
                        blank=True,
                        help_text="Company name if business customer",
                        max_length=255,
                    ),
                ),
                (
                    "customer_vat_id",
                    models.CharField(
                        blank=True,
                        help_text="VAT ID for Romanian compliance",
                        max_length=50,
                    ),
                ),
                (
                    "billing_address",
                    models.JSONField(
                        default=dict, help_text="Billing address snapshot"
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("card", "Credit/Debit Card"),
                            ("bank_transfer", "Bank Transfer"),
                            ("paypal", "PayPal"),
                            ("crypto", "Cryptocurrency"),
                            ("wallet", "Account Credit"),
                            ("manual", "Manual Payment"),
                        ],
                        help_text="Payment method used",
                        max_length=50,
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Payment gateway transaction ID",
                        max_length=255,
                    ),
                ),
                (
                    "gateway_response",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Payment gateway response data",
                    ),
                ),
                (
                    "source_ip",
                    models.GenericIPAddressField(
                        blank=True, help_text="Customer IP address", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="Customer browser user agent"
                    ),
                ),
                ("referrer", models.URLField(blank=True, help_text="Referrer URL")),
                ("utm_source", models.CharField(blank=True, max_length=100)),
                ("utm_medium", models.CharField(blank=True, max_length=100)),
                ("utm_campaign", models.CharField(blank=True, max_length=100)),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Internal order notes"),
                ),
                (
                    "customer_notes",
                    models.TextField(blank=True, help_text="Notes from customer"),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional order metadata"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When order was completed", null=True
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When draft order expires", null=True
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Order currency",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="billing.currency",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orders",
                        to="customers.customer",
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(
                        blank=True,
                        help_text="Generated invoice for this order",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders",
                        to="billing.invoice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Order",
                "verbose_name_plural": "Orders",
                "db_table": "orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Product name at time of order", max_length=200
                    ),
                ),
                (
                    "product_type",
                    models.CharField(
                        help_text="Product type at time of order", max_length=30
                    ),
                ),
                (
                    "billing_period",
                    models.CharField(
                        help_text="Billing period for this item", max_length=20
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Quantity ordered",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "unit_price_cents",
                    models.BigIntegerField(
                        help_text="Unit price in cents (snapshot)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "setup_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="Setup fee in cents",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "tax_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Tax rate applied (e.g., 0.1900 for 19%)",
                        max_digits=5,
                    ),
                ),
                (
                    "tax_cents",
                    models.BigIntegerField(default=0, help_text="Tax amount in cents"),
                ),
                (
                    "line_total_cents",
                    models.BigIntegerField(
                        default=0, help_text="Total for this line including tax"
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        default=dict,
                        help_text="Product configuration (domain, username, specs, etc.)",
                    ),
                ),
                (
                    "domain_name",
                    models.CharField(
                        blank=True, help_text="Associated domain name", max_length=255
                    ),
                ),
                (
                    "provisioning_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Provisioning status for this item",
                        max_length=20,
                    ),
                ),
                (
                    "provisioning_notes",
                    models.TextField(
                        blank=True, help_text="Provisioning notes and error messages"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "provisioned_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this item was successfully provisioned",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="orders.order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Order Item",
                "verbose_name_plural": "Order Items",
                "db_table": "order_items",
                "ordering": ["created_at"],
            },
        ),
    ]
