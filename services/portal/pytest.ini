[pytest]
# ===============================================================================
# PORTAL SERVICE PYTEST CONFIGURATION - POST REDIS REMOVAL âœ… 
# ===============================================================================
# STRICT ISOLATION: No database access, no Redis sessions, API client testing only
# Enforces service isolation - portal cannot access platform database

DJANGO_SETTINGS_MODULE = config.settings
python_files = test_*.py *_test.py *_tests.py
python_classes = Test*
python_functions = test_*

# Set Python path for clean imports
pythonpath = .

# Add options - strict database access prevention
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --disable-warnings
    -p no:django_db
    --cov=apps
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    -k "not django_db"

# Test paths - portal-specific tests only
testpaths = tests

# Custom markers - NO database-related markers, post Redis removal
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    unit: marks tests as unit tests (single component, no database)
    api: marks tests for API endpoint functionality
    security: marks security isolation tests
    no_db: marks tests that must not access database (strictly enforced)
    mock_api: marks tests with mocked platform API responses
    
# Filter warnings - strict database access prevention
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Explicitly disable Django DB plugin - no database access allowed
django_find_project = false