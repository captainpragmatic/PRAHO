# Generated by Django 5.0.14 on 2025-08-19 17:22

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("billing", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductBundle",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(help_text="Bundle name", max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Bundle description"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether bundle is available"
                    ),
                ),
                (
                    "discount_type",
                    models.CharField(
                        choices=[
                            ("percent", "Percentage Discount"),
                            ("fixed", "Fixed Amount Discount"),
                            ("override", "Override Total Price"),
                        ],
                        default="percent",
                        max_length=20,
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Discount percentage or fixed amount",
                        max_digits=10,
                    ),
                ),
                ("meta", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Product Bundle",
                "verbose_name_plural": "Product Bundles",
                "db_table": "product_bundles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly identifier", max_length=100, unique=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for customers", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed product description"
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        blank=True,
                        help_text="Brief description for listings",
                        max_length=500,
                    ),
                ),
                (
                    "product_type",
                    models.CharField(
                        choices=[
                            ("shared_hosting", "Shared Hosting"),
                            ("vps", "VPS"),
                            ("dedicated", "Dedicated Server"),
                            ("domain", "Domain Registration"),
                            ("ssl", "SSL Certificate"),
                            ("email", "Email Hosting"),
                            ("backup", "Backup Service"),
                            ("addon", "Add-on Service"),
                            ("license", "Software License"),
                            ("support", "Support Package"),
                        ],
                        help_text="Product category",
                        max_length=30,
                    ),
                ),
                (
                    "module",
                    models.CharField(
                        blank=True,
                        help_text="Provisioning module name (e.g., 'cpanel', 'plesk', 'virtualmin')",
                        max_length=50,
                    ),
                ),
                (
                    "module_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Module-specific configuration for provisioning",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether product is available for purchase",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Show prominently on website"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True, help_text="Visible on public website"
                    ),
                ),
                (
                    "requires_domain",
                    models.BooleanField(
                        default=False, help_text="Customer must provide a domain"
                    ),
                ),
                (
                    "domain_required_at_signup",
                    models.BooleanField(
                        default=False, help_text="Domain must be specified during order"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order (lower numbers first)"
                    ),
                ),
                ("meta_title", models.CharField(blank=True, max_length=255)),
                ("meta_description", models.TextField(blank=True)),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags for filtering and search (as JSON array)",
                    ),
                ),
                (
                    "includes_vat",
                    models.BooleanField(
                        default=False, help_text="Whether displayed prices include VAT"
                    ),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional product metadata",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "db_table": "products",
                "ordering": ["sort_order", "name"],
                "indexes": [
                    models.Index(fields=["slug"], name="products_slug_5e91f2_idx"),
                    models.Index(
                        fields=["product_type", "is_active"],
                        name="products_product_6ea65b_idx",
                    ),
                    models.Index(
                        fields=["is_active", "is_public"],
                        name="products_is_acti_2245a6_idx",
                    ),
                    models.Index(
                        fields=["sort_order"], name="products_sort_or_6c1e3d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ProductBundleItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="Quantity of this product in the bundle"
                    ),
                ),
                (
                    "override_price_cents",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Override price for this product in bundle (in cents)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Product configuration within bundle",
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this product is required in the bundle",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bundle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="products.productbundle",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bundle_items",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Bundle Item",
                "verbose_name_plural": "Product Bundle Items",
                "db_table": "product_bundle_items",
                "ordering": ["created_at"],
                "unique_together": {("bundle", "product")},
            },
        ),
        migrations.CreateModel(
            name="ProductPrice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "billing_period",
                    models.CharField(
                        choices=[
                            ("once", "One Time"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("semiannual", "Semi-Annual"),
                            ("annual", "Annual"),
                            ("biennial", "Biennial"),
                            ("triennial", "Triennial"),
                        ],
                        help_text="Billing frequency",
                        max_length=20,
                    ),
                ),
                (
                    "amount_cents",
                    models.BigIntegerField(
                        help_text="Recurring price in cents (e.g., 2999 for 29.99 RON)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "setup_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="One-time setup fee in cents",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "discount_percent",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Percentage discount (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "minimum_quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="Minimum quantity that can be ordered"
                    ),
                ),
                (
                    "maximum_quantity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum quantity (blank for unlimited)",
                        null=True,
                    ),
                ),
                (
                    "promo_price_cents",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Promotional price in cents",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "promo_valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When promotional pricing expires",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this price is available"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Currency for this price",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="billing.currency",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prices",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Price",
                "verbose_name_plural": "Product Prices",
                "db_table": "product_prices",
                "ordering": ["billing_period", "amount_cents"],
                "indexes": [
                    models.Index(
                        fields=["currency", "billing_period"],
                        name="product_pri_currenc_ba206f_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="product_pri_is_acti_33e3d0_idx"
                    ),
                ],
                "unique_together": {("product", "currency", "billing_period")},
            },
        ),
        migrations.CreateModel(
            name="ProductRelationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("requires", "Requires"),
                            ("includes", "Includes"),
                            ("upgrades_to", "Can Upgrade To"),
                            ("cross_sell", "Cross-sell"),
                            ("upsell", "Upsell"),
                            ("downsell", "Downsell"),
                            ("incompatible", "Incompatible With"),
                            ("replaces", "Replaces"),
                        ],
                        help_text="Type of relationship between products",
                        max_length=20,
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Relationship-specific configuration",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order for relationships of same type",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this relationship is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "source_product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_from",
                        to="products.product",
                    ),
                ),
                (
                    "target_product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_to",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Relationship",
                "verbose_name_plural": "Product Relationships",
                "db_table": "product_relationships",
                "ordering": ["sort_order", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["source_product", "relationship_type"],
                        name="product_rel_source__a85181_idx",
                    ),
                    models.Index(
                        fields=["target_product", "relationship_type"],
                        name="product_rel_target__ad4bcb_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="product_rel_is_acti_b28a02_idx"
                    ),
                ],
                "unique_together": {
                    ("source_product", "target_product", "relationship_type")
                },
            },
        ),
    ]
