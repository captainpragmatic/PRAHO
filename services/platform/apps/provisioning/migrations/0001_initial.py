# Generated by Django 5.0.14 on 2025-08-19 13:50

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("customers", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Server Name")),
                (
                    "hostname",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Hostname"
                    ),
                ),
                (
                    "server_type",
                    models.CharField(
                        choices=[
                            ("shared", "Shared Server"),
                            ("vps_host", "VPS Host"),
                            ("dedicated", "Dedicated Server"),
                            ("cloud", "Cloud Node"),
                        ],
                        max_length=20,
                        verbose_name="Server Type",
                    ),
                ),
                ("primary_ip", models.GenericIPAddressField(verbose_name="Primary IP")),
                (
                    "secondary_ips",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Secondary IPs"
                    ),
                ),
                ("location", models.CharField(max_length=100, verbose_name="Location")),
                (
                    "datacenter",
                    models.CharField(max_length=100, verbose_name="Datacenter"),
                ),
                (
                    "cpu_model",
                    models.CharField(max_length=200, verbose_name="CPU Model"),
                ),
                ("cpu_cores", models.PositiveIntegerField(verbose_name="CPU Cores")),
                ("ram_gb", models.PositiveIntegerField(verbose_name="RAM (GB)")),
                (
                    "disk_type",
                    models.CharField(max_length=50, verbose_name="Disk Type"),
                ),
                (
                    "disk_capacity_gb",
                    models.PositiveIntegerField(verbose_name="Disk Capacity (GB)"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("maintenance", "Under Maintenance"),
                            ("offline", "Offline"),
                            ("decommissioned", "Decommissioned"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "cpu_usage_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="CPU Usage (%)",
                    ),
                ),
                (
                    "ram_usage_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="RAM Usage (%)",
                    ),
                ),
                (
                    "disk_usage_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Disk Usage (%)",
                    ),
                ),
                (
                    "max_services",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Maximum Services"
                    ),
                ),
                (
                    "os_type",
                    models.CharField(max_length=100, verbose_name="Operating System"),
                ),
                (
                    "control_panel",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Control Panel"
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Provider"
                    ),
                ),
                (
                    "provider_instance_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Instance ID"
                    ),
                ),
                (
                    "monthly_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Monthly Cost (RON)",
                    ),
                ),
                (
                    "last_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Maintenance"
                    ),
                ),
                (
                    "next_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Next Maintenance"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Server",
                "verbose_name_plural": "Servers",
                "db_table": "servers",
                "ordering": ["location", "name"],
                "indexes": [
                    models.Index(
                        fields=["status", "server_type"],
                        name="servers_status_ffec70_idx",
                    ),
                    models.Index(
                        fields=["location"], name="servers_locatio_5f4813_idx"
                    ),
                    models.Index(
                        fields=["primary_ip"], name="servers_primary_1e48fd_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ServicePlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Plan Name")),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("shared_hosting", "Shared Web Hosting"),
                            ("vps", "VPS"),
                            ("dedicated", "Dedicated Server"),
                            ("cloud", "Cloud Hosting"),
                            ("domain", "Domain"),
                            ("ssl", "SSL Certificate"),
                            ("email", "Email Hosting"),
                            ("backup", "Backup"),
                            ("maintenance", "Maintenance"),
                        ],
                        max_length=30,
                        verbose_name="Plan Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "price_monthly",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Monthly Price (RON)",
                    ),
                ),
                (
                    "price_quarterly",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Quarterly Price (RON)",
                    ),
                ),
                (
                    "price_annual",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Annual Price (RON)",
                    ),
                ),
                (
                    "setup_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Setup Fee (RON)",
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        default=dict,
                        help_text="Technical specifications and features in JSON format",
                        verbose_name="Features",
                    ),
                ),
                (
                    "disk_space_gb",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Disk Space (GB)"
                    ),
                ),
                (
                    "bandwidth_gb",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Monthly Traffic (GB)"
                    ),
                ),
                (
                    "email_accounts",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Email Accounts"
                    ),
                ),
                (
                    "databases",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Databases"
                    ),
                ),
                (
                    "domains",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Domains"
                    ),
                ),
                (
                    "cpu_cores",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="CPU Cores"
                    ),
                ),
                (
                    "ram_gb",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="RAM (GB)"
                    ),
                ),
                (
                    "includes_vat",
                    models.BooleanField(
                        default=False, verbose_name="Price Includes VAT"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "is_public",
                    models.BooleanField(default=True, verbose_name="Public on Website"),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, verbose_name="Sort Order"),
                ),
                (
                    "auto_provision",
                    models.BooleanField(default=False, verbose_name="Auto Provision"),
                ),
                (
                    "provisioning_script",
                    models.TextField(blank=True, verbose_name="Provisioning Script"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Service Plan",
                "verbose_name_plural": "Service Plans",
                "db_table": "service_plans",
                "ordering": ["plan_type", "sort_order", "price_monthly"],
                "indexes": [
                    models.Index(
                        fields=["plan_type", "is_active"],
                        name="service_pla_plan_ty_8f3dd0_idx",
                    ),
                    models.Index(
                        fields=["is_public", "is_active"],
                        name="service_pla_is_publ_1b98fb_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(max_length=200, verbose_name="Service Name"),
                ),
                (
                    "domain",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Primary Domain"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="System Username"
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("semi_annual", "Semi-Annual"),
                            ("annual", "Annual"),
                        ],
                        default="monthly",
                        max_length=20,
                        verbose_name="Billing Cycle",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Price (RON)"
                    ),
                ),
                (
                    "setup_fee_paid",
                    models.BooleanField(default=False, verbose_name="Setup Fee Paid"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("provisioning", "Provisioning"),
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("terminated", "Terminated"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "activated_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Activated At"
                    ),
                ),
                (
                    "suspended_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Suspended At"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Expires At"
                    ),
                ),
                (
                    "provisioning_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Provisioning Data"
                    ),
                ),
                (
                    "last_provisioning_attempt",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Provisioning Attempt"
                    ),
                ),
                (
                    "provisioning_errors",
                    models.TextField(blank=True, verbose_name="Provisioning Errors"),
                ),
                (
                    "disk_usage_mb",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Disk Usage (MB)"
                    ),
                ),
                (
                    "bandwidth_usage_mb",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Bandwidth Used (MB)"
                    ),
                ),
                (
                    "email_accounts_used",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Email Accounts Used"
                    ),
                ),
                (
                    "databases_used",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Databases Used"
                    ),
                ),
                (
                    "auto_renew",
                    models.BooleanField(default=True, verbose_name="Auto Renew"),
                ),
                (
                    "admin_notes",
                    models.TextField(blank=True, verbose_name="Admin Notes"),
                ),
                (
                    "suspension_reason",
                    models.TextField(blank=True, verbose_name="Suspension Reason"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="customers.customer",
                        verbose_name="Customer",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="services",
                        to="provisioning.server",
                        verbose_name="Server",
                    ),
                ),
                (
                    "service_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="provisioning.serviceplan",
                        verbose_name="Service Plan",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service",
                "verbose_name_plural": "Services",
                "db_table": "services",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProvisioningTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("create_service", "Create Service"),
                            ("suspend_service", "Suspend Service"),
                            ("unsuspend_service", "Unsuspend Service"),
                            ("terminate_service", "Terminate Service"),
                            ("update_service", "Update Service"),
                            ("backup_service", "Backup Service"),
                        ],
                        max_length=30,
                        verbose_name="Task Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("retrying", "Retrying"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Parameters"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Started At"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completed At"
                    ),
                ),
                (
                    "result",
                    models.JSONField(blank=True, default=dict, verbose_name="Result"),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(default=0, verbose_name="Retry Count"),
                ),
                (
                    "max_retries",
                    models.PositiveIntegerField(default=3, verbose_name="Max Retries"),
                ),
                (
                    "next_retry_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Next Retry At"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="provisioning_tasks",
                        to="provisioning.service",
                        verbose_name="Service",
                    ),
                ),
            ],
            options={
                "verbose_name": "Provisioning Task",
                "verbose_name_plural": "Provisioning Tasks",
                "db_table": "provisioning_tasks",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "created_at"],
                        name="provisionin_status_17c83b_idx",
                    ),
                    models.Index(
                        fields=["service", "task_type"],
                        name="provisionin_service_559405_idx",
                    ),
                    models.Index(
                        fields=["next_retry_at"], name="provisionin_next_re_f32b56_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["customer", "status"], name="services_custome_308303_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["server", "status"], name="services_server__32da6c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["status", "expires_at"], name="services_status_3758f7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(fields=["domain"], name="services_domain_4dd8b5_idx"),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(fields=["username"], name="services_usernam_a5a1a7_idx"),
        ),
    ]
