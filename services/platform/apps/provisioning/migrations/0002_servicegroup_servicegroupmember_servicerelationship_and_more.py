# Generated by Django 5.0.14 on 2025-08-19 19:20

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("customers", "0002_initial"),
        ("domains", "0001_initial"),
        ("provisioning", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ServiceGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Service group name", max_length=100),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of service group"
                    ),
                ),
                (
                    "group_type",
                    models.CharField(
                        choices=[
                            ("package", "üì¶ Hosting Package"),
                            ("cluster", "üîó Service Cluster"),
                            ("bundle", "üéÅ Product Bundle"),
                            ("environment", "üèóÔ∏è Environment"),
                            ("reseller", "üë• Reseller Package"),
                        ],
                        help_text="Type of service group",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "üü¢ Active"),
                            ("suspended", "üü° Suspended"),
                            ("cancelled", "üî¥ Cancelled"),
                            ("pending", "‚è≥ Pending Setup"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                            ("one_time", "One Time"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                (
                    "auto_provision",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically provision all services in group",
                    ),
                ),
                (
                    "coordinated_billing",
                    models.BooleanField(
                        default=True,
                        help_text="Generate single invoice for all services",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="Customer owning this service group",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_groups",
                        to="customers.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "üì¶ Service Group",
                "verbose_name_plural": "üì¶ Service Groups",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceGroupMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "member_role",
                    models.CharField(
                        choices=[
                            ("primary", "üéØ Primary Service"),
                            ("dependency", "‚ö° Dependency"),
                            ("addon", "üîß Add-on"),
                            ("backup", "üíæ Backup Service"),
                        ],
                        default="primary",
                        help_text="Role of service in group",
                        max_length=20,
                    ),
                ),
                (
                    "provision_order",
                    models.PositiveIntegerField(
                        default=1, help_text="Order for provisioning (1 = first)"
                    ),
                ),
                (
                    "billing_override",
                    models.BooleanField(
                        default=False, help_text="Override individual service billing"
                    ),
                ),
                (
                    "custom_price_cents",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Custom price for this service in group",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "group",
                    models.ForeignKey(
                        help_text="Service group",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="provisioning.servicegroup",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="Service in group",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_memberships",
                        to="provisioning.service",
                    ),
                ),
            ],
            options={
                "verbose_name": "üë• Service Group Member",
                "verbose_name_plural": "üë• Service Group Members",
                "ordering": ["provision_order", "joined_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("addon", "üîß Add-on Service"),
                            ("included", "üì¶ Included Service"),
                            ("dependency", "‚ö° Required Dependency"),
                            ("upgrade", "‚¨ÜÔ∏è Service Upgrade"),
                            ("bundle", "üéÅ Bundle Component"),
                        ],
                        help_text="Type of service relationship",
                        max_length=20,
                    ),
                ),
                (
                    "billing_impact",
                    models.CharField(
                        choices=[
                            ("separate", "üí≥ Billed Separately"),
                            ("included", "üÜì Included in Parent"),
                            ("discounted", "üí∞ Discounted Rate"),
                            ("prorated", "üìä Prorated Billing"),
                        ],
                        default="separate",
                        help_text="How this affects customer billing",
                        max_length=20,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="Child service is required for parent to function",
                    ),
                ),
                (
                    "auto_provision",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically provision child when parent is created",
                    ),
                ),
                (
                    "cascade_suspend",
                    models.BooleanField(
                        default=False,
                        help_text="Suspend child service when parent is suspended",
                    ),
                ),
                (
                    "cascade_terminate",
                    models.BooleanField(
                        default=False,
                        help_text="Terminate child service when parent is terminated",
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Discount percentage for bundle pricing",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fixed_discount_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="Fixed discount amount in cents",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "child_service",
                    models.ForeignKey(
                        help_text="Related service (e.g., domain, SSL, backup)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_relationships",
                        to="provisioning.service",
                    ),
                ),
                (
                    "parent_service",
                    models.ForeignKey(
                        help_text="Primary service (e.g., VPS hosting)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_relationships",
                        to="provisioning.service",
                    ),
                ),
            ],
            options={
                "verbose_name": "üîó Service Relationship",
                "verbose_name_plural": "üîó Service Relationships",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceDomain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain_type",
                    models.CharField(
                        choices=[
                            ("primary", "üéØ Primary Domain"),
                            ("addon", "‚ûï Add-on Domain"),
                            ("subdomain", "üîó Subdomain"),
                            ("redirect", "‚Ü©Ô∏è Domain Redirect"),
                            ("parking", "üÖøÔ∏è Parked Domain"),
                        ],
                        default="primary",
                        help_text="How domain is used with service",
                        max_length=20,
                    ),
                ),
                (
                    "subdomain",
                    models.CharField(
                        blank=True,
                        help_text="Subdomain prefix (e.g., 'blog' for blog.example.com)",
                        max_length=100,
                    ),
                ),
                (
                    "dns_management",
                    models.BooleanField(
                        default=True, help_text="Manage DNS records for this domain"
                    ),
                ),
                (
                    "ssl_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="SSL certificate enabled for this domain",
                    ),
                ),
                (
                    "ssl_type",
                    models.CharField(
                        choices=[
                            ("none", "No SSL"),
                            ("shared", "Shared SSL"),
                            ("dedicated", "Dedicated SSL"),
                            ("wildcard", "Wildcard SSL"),
                        ],
                        default="none",
                        max_length=20,
                    ),
                ),
                (
                    "redirect_url",
                    models.URLField(
                        blank=True, help_text="Redirect target URL (for redirect type)"
                    ),
                ),
                (
                    "redirect_type",
                    models.CharField(
                        blank=True,
                        choices=[("301", "301 Permanent"), ("302", "302 Temporary")],
                        default="301",
                        max_length=20,
                    ),
                ),
                (
                    "email_routing",
                    models.BooleanField(
                        default=False, help_text="Handle email for this domain"
                    ),
                ),
                (
                    "catch_all_email",
                    models.EmailField(
                        blank=True, help_text="Catch-all email address", max_length=254
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "domain",
                    models.ForeignKey(
                        help_text="Domain assigned to service",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="domains.domain",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="Hosting service for this domain",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="domains",
                        to="provisioning.service",
                    ),
                ),
            ],
            options={
                "verbose_name": "üåê Service Domain",
                "verbose_name_plural": "üåê Service Domains",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["service", "domain_type"],
                        name="service_domain_type_idx",
                    ),
                    models.Index(
                        fields=["domain", "is_active"], name="service_domain_active_idx"
                    ),
                ],
                "unique_together": {("service", "domain", "subdomain")},
            },
        ),
        migrations.AddIndex(
            model_name="servicegroup",
            index=models.Index(
                fields=["customer", "status"], name="service_group_customer_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicegroup",
            index=models.Index(
                fields=["group_type", "status"], name="service_group_type_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicegroupmember",
            index=models.Index(
                fields=["group", "provision_order"], name="service_member_order_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicegroupmember",
            index=models.Index(
                fields=["service", "is_active"], name="service_member_active_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="servicegroupmember",
            unique_together={("group", "service")},
        ),
        migrations.AddIndex(
            model_name="servicerelationship",
            index=models.Index(
                fields=["parent_service", "relationship_type"],
                name="service_rel_parent_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicerelationship",
            index=models.Index(
                fields=["child_service", "is_required"], name="service_rel_child_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="servicerelationship",
            unique_together={("parent_service", "child_service")},
        ),
    ]
