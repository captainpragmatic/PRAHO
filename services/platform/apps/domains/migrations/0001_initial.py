# Generated by Django 5.0.14 on 2025-08-19 19:20

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("customers", "0002_initial"),
        ("orders", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Registrar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=100)),
                ("website_url", models.URLField()),
                ("api_endpoint", models.URLField(help_text="Base API endpoint URL")),
                ("api_username", models.CharField(blank=True, max_length=100)),
                ("api_key", models.CharField(blank=True, max_length=255)),
                ("api_secret", models.CharField(blank=True, max_length=255)),
                (
                    "webhook_secret",
                    models.CharField(
                        blank=True,
                        help_text="Secret for webhook signature verification",
                        max_length=255,
                    ),
                ),
                (
                    "webhook_endpoint",
                    models.URLField(
                        blank=True, help_text="Our webhook endpoint for this registrar"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "üü¢ Active"),
                            ("suspended", "üü° Suspended"),
                            ("disabled", "üî¥ Disabled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "default_nameservers",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Default nameservers for new domains",
                    ),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "monthly_fee_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="Monthly account fee in cents",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("total_domains", models.PositiveIntegerField(default=0)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                ("last_error", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "üè¢ Registrar",
                "verbose_name_plural": "üè¢ Registrars",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TLD",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "extension",
                    models.CharField(
                        help_text="TLD extension (e.g., 'com', 'ro', 'eu')",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Human-readable description of TLD", max_length=200
                    ),
                ),
                (
                    "registration_price_cents",
                    models.BigIntegerField(
                        help_text="Registration price in cents (customer pays)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "renewal_price_cents",
                    models.BigIntegerField(
                        help_text="Renewal price in cents (customer pays)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "transfer_price_cents",
                    models.BigIntegerField(
                        help_text="Transfer price in cents (customer pays)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "registrar_cost_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="Cost from registrar in cents",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "min_registration_period",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Minimum registration period in years",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "max_registration_period",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Maximum registration period in years",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "whois_privacy_available",
                    models.BooleanField(
                        default=True,
                        help_text="Whether WHOIS privacy is available for this TLD",
                    ),
                ),
                (
                    "grace_period_days",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Grace period for renewal after expiration",
                    ),
                ),
                (
                    "redemption_fee_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="Additional fee for domain redemption",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "requires_local_presence",
                    models.BooleanField(
                        default=False,
                        help_text="Requires local presence (e.g., .ro domains)",
                    ),
                ),
                (
                    "special_requirements",
                    models.TextField(
                        blank=True, help_text="Special registration requirements"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Show in featured TLD list"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "üåê TLD",
                "verbose_name_plural": "üåê TLDs",
                "ordering": ["extension"],
            },
        ),
        migrations.CreateModel(
            name="Domain",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full domain name (e.g., 'example.com')",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "‚è≥ Pending Registration"),
                            ("active", "üü¢ Active"),
                            ("expired", "üî¥ Expired"),
                            ("suspended", "üü° Suspended"),
                            ("transfer_in", "üì• Transfer In Progress"),
                            ("transfer_out", "üì§ Transfer Out Progress"),
                            ("cancelled", "‚ùå Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("registered_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "registrar_domain_id",
                    models.CharField(
                        blank=True, help_text="Domain ID at registrar", max_length=100
                    ),
                ),
                (
                    "epp_code",
                    models.CharField(
                        blank=True,
                        help_text="EPP/Auth code for transfers",
                        max_length=100,
                    ),
                ),
                (
                    "auto_renew",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically renew domain before expiration",
                    ),
                ),
                (
                    "whois_privacy",
                    models.BooleanField(
                        default=False, help_text="WHOIS privacy protection enabled"
                    ),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=True,
                        help_text="Domain lock to prevent unauthorized transfers",
                    ),
                ),
                (
                    "nameservers",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Current nameservers for domain",
                    ),
                ),
                ("renewal_notices_sent", models.PositiveIntegerField(default=0)),
                ("last_renewal_notice", models.DateTimeField(blank=True, null=True)),
                (
                    "last_paid_amount_cents",
                    models.BigIntegerField(
                        default=0,
                        help_text="Last amount paid for this domain",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="domains",
                        to="customers.customer",
                    ),
                ),
                (
                    "registrar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="domains",
                        to="domains.registrar",
                    ),
                ),
                (
                    "tld",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="domains",
                        to="domains.tld",
                    ),
                ),
            ],
            options={
                "verbose_name": "üåç Domain",
                "verbose_name_plural": "üåç Domains",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DomainOrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain_name",
                    models.CharField(
                        help_text="Domain name to register/renew/transfer",
                        max_length=255,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("register", "üÜï Register"),
                            ("renew", "üîÑ Renew"),
                            ("transfer", "üì• Transfer"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "years",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Registration/renewal period in years",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "unit_price_cents",
                    models.BigIntegerField(
                        help_text="Price per year in cents",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_price_cents",
                    models.BigIntegerField(
                        help_text="Total price for all years",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "whois_privacy",
                    models.BooleanField(
                        default=False, help_text="Include WHOIS privacy protection"
                    ),
                ),
                (
                    "auto_renew",
                    models.BooleanField(
                        default=True, help_text="Enable auto-renewal for this domain"
                    ),
                ),
                (
                    "epp_code",
                    models.CharField(
                        blank=True,
                        help_text="EPP/Auth code for domain transfer",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "domain",
                    models.ForeignKey(
                        blank=True,
                        help_text="Created/renewed domain after order processing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="order_items",
                        to="domains.domain",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="domain_items",
                        to="orders.order",
                    ),
                ),
                (
                    "tld",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="order_items",
                        to="domains.tld",
                    ),
                ),
            ],
            options={
                "verbose_name": "üõí Domain Order Item",
                "verbose_name_plural": "üõí Domain Order Items",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TLDRegistrarAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False, help_text="Primary registrar for this TLD"
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=1, help_text="Priority order (1 = highest)"
                    ),
                ),
                (
                    "cost_override_cents",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Override cost for this registrar-TLD combination",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "registrar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tld_assignments",
                        to="domains.registrar",
                    ),
                ),
                (
                    "tld",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registrar_assignments",
                        to="domains.tld",
                    ),
                ),
            ],
            options={
                "verbose_name": "üîó TLD-Registrar Assignment",
                "verbose_name_plural": "üîó TLD-Registrar Assignments",
                "ordering": ["tld__extension", "priority"],
            },
        ),
        migrations.AddIndex(
            model_name="domain",
            index=models.Index(
                fields=["status", "expires_at"], name="domain_expiring_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="domain",
            index=models.Index(
                fields=["customer", "-created_at"], name="domain_customer_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="domain",
            index=models.Index(
                fields=["registrar", "status"], name="domain_registrar_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tldregistrarassignment",
            unique_together={("tld", "registrar")},
        ),
    ]
