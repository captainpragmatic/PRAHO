- Summary: OWASP Top 10 review for apps/users with concrete fixes and recommendations.

- What-I-Fixed:
  - Open-Redirect: Validated `next` parameter (including `HX-Redirect`) via a safe helper to prevent off-site redirects. File: apps/users/views.py.
  - Auth-Rate-Limits: Added django-ratelimit to login, register, and 2FA verify; friendly handling when limited (test-aware). File: apps/users/views.py.
  - Documentation: Added ratelimit.md describing current coverage, gaps, and recommended thresholds.

- Strong-Controls-Present:
  - Account-Lockout: Progressive lockout with increasing delays on failed attempts in User model.
  - 2FA-Security: TOTP secrets encrypted at rest; backup codes stored hashed; TOTP replay protection via cache; session rotation on password and 2FA changes; configurable session timeouts (standard, sensitive, shared, remember-me).
  - CSRF-And-Forms: No csrf_exempt in users; Django forms/views used; template auto-escaping; no mark_safe.
  - Security-Logging: Extensive audit trail via signals/services (IP, user-agent, categories, event IDs).
  - Input-Validation: Centralized validators and security decorators for rate limiting, timing normalization, and race-condition prevention.
  - Passwords: Argon2 default; secure reset flow with rate limiting and audit.

- A01-Broken-Access-Control:
  - Staff-only views guard with is_staff; customer access uses explicit membership checks.
  - Recommendation: Ensure role fields (e.g., staff_role) are never user-editable; current forms do not expose them—keep it enforced.

- A02-Cryptographic-Failures:
  - 2FA secrets encrypted; password hashing strong.
  - Backup-code-hashing mismatch: User.generate_backup_codes uses deterministic peppered SHA-256; MFA BackupCodeService uses Django hasher.
  - Recommendation: Standardize on Django’s password hasher for all backup codes and use constant-time comparison; migrate existing codes.

- A03-Injection:
  - ORM usage and cleaned forms; no dynamic SQL, eval/exec, pickle, or unsafe yaml loads found in users/.
  - Recommendation: Keep inputs routed through validators and preserve template escaping.

- A04-Insecure-Design:
  - 2FA setup uses temporary session secret cleared after use.
  - Recommendation: Keep secrets out of logs and audit payloads (current code complies).

- A05-Security-Misconfiguration:
  - Rate limiting now on login/register/2FA; prod has RATELIMIT_ENABLE.
  - IP-Trust: _get_client_ip trusts X-Real-IP/X-Forwarded-For without trusted-proxy checks.
  - Recommendations: Configure trusted proxy handling (e.g., SECURE_PROXY_SSL_HEADER, or django-ipware), so ratelimits and audits see real client IPs; verify prod HTTPS flags (SESSION_COOKIE_SECURE, CSRF_COOKIE_SECURE, HSTS).

- A07-Identification-And-Authentication-Failures:
  - Brute-force defense: Progressive lockout plus rate limits.
  - Enumeration: api_check_email returns exists; CSRF + rate limit helps but can be scraped.
  - Recommendations: Make email-check response generic for anonymous users or require CAPTCHA/auth; optionally add a longer-window limit (e.g., 100/h) on 2FA verify to reduce spray.

- A08-Software-And-Data-Integrity-Failures:
  - Email/invite flows generate tokens and do not run untrusted code. Good.

- A09-Security-Logging-And-Monitoring-Failures:
  - Rich security logging present; errors return opaque IDs.
  - Recommendation: Confirm log retention/PII minimization for GDPR; alert on repeated rate-limit blocks.

- A10-Server-Side-Request-Forgery:
  - Not applicable in apps/users.

- Other-Observations:
  - Session-Rotation: Happens on password and 2FA changes; login rotation is Django-default—covered.
  - Remember-Me-UX: Consider calling SessionSecurityService.update_session_timeout at login when remember_me is used.

- Suggested-Next-Changes:
  - Unify-backup-code-hashing across model/services (Django hasher), with migration and compatibility verify.
  - Harden-api_check_email to generic responses or protect with CAPTCHA/auth for public use; keep rate limits.
  - Add-trusted-proxy-IP-handling so IP-based rate limiting and audit logs cannot be spoofed by headers.

- Files-Touched-In-This-Review:
  - apps/users/views.py: Safe redirect helper; ratelimit decorators on login/register/2FA with test-aware handling.
  - ratelimit.md: Coverage, gaps, and recommendations.

